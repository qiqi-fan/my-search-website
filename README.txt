前端部分：
1.搜索界面，使用jQuery结合Ajax发送页面请求，通过本机8080端口打开页面；
搜索界面主要的功能有:输入关键字，实现检索功能；换肤功能（点击换肤按钮，切换首页背景）；登录功能（登录个人账号，实现个人信息存储）
2.搜索结果页面:通过首页发送请求，跳转全部搜索页面。这个页面实现的功能主要有:搜索结果列表化展示，点击想要浏览的结果，可以对某个问题的答案进行浏览。第二个功能是返回首页，点击主页按钮，返回首页，第三个设置功能，包括三个模块，分别是发布问题，查看我的全部回答（在已经登录的前提下才可以实现），还有个人首页，该界面可以记录当前用户的个人信息，比如账号，签名，提出的问题等。部分模块还暂未实线。第三个功能就是登录界面，可以选择创建新的账号，或者登录自己的账号，登录信息会存储在数据库中。
3.答案浏览界面:通过第二个页面，选择想要浏览的答案，跳转到第三个页面。第三个页面实现的功能主要有浏览该问题的所有答案，向该问题添加答案，提出相关问题，进行登录操作。

后端部分：
程序启动
1、数据清洗：从爬取的网页代码中提取出问题和答案内容；（通过字符串查找）
	（1）"<div class=\"rich-content-container rich-text-”
找到答案
通过<title>和</title>找到标题，然后保存在另一个文件中
格式就是
Title:xxxxxxxxx

回答1:xxxxxxxx

回答2:xxxxxxxx

回答3:xxxxxxxxxxx

2、索引构建
对标题进行分词，将标题分词后的词组作为key，标题所在文件名作为value，
分词用的是python的jieba分词库（为什么不用java？可能是因为我的jdk版本或者环	境的问题，从网上下的第三方库没法用，所以选择使用python的）具体的方法是调用	java中的Runtime.getRuntIme.exec()方法来创建一个子进程，这个方法返回一个Process对象，然后重定向这个子进程	的输入输出流（Process.getInputStream()和Process.getOutputStream()方法）,将要分词的	内容从输入流传递给子进程，从输出流读取出结果。分词的结果是一个字符串数组，但是同一个标题可能会分词出相同的内容（比如：“如何判断一个函数是奇函数还是偶函数”，在分词结果中，“函数”这个词可能会出现两次）所以再把分词后的结果放在一个Set<String>容器中进行去重(我使用的是HashSet<String>)，然后遍历整个set，将去重后的词作为key，标题所在文件的文件名作为value（通过这个文件也可以拿到标题，毕竟文件第一行就是标题）由于同一个关键字可能在好多个标题中都出现过，所以每个词对应的应该是一个ArrayList<String>，其中每个元素是一个文件名,所以最终存储索引信息的是一个HashMap<String,ArrayList<Stri ng>>。
3、上面两步属于服务器启动时的初始化阶段，这个时候还不能对外提供服务，因为还不具备搜索功能。当服务器初始化完成后即可对外提供服务。用户可从浏览器上方的地址栏输入服务器的ip+端口访问主页(比如localhost:8080访问根页面),然后在页面中可选择进行搜索和登录，注册等服务。
4、搜索服务，当前段请求搜索服务时，会向后端发送get请求，QueryString中包含一个word为搜索关键字，后端拿到这个关键字在HashMap中得到对应的ArrayLIst<String>，也就是所有文件名，然后用这些文件名读取对应的文件，将读取到的文件的标题保存在一个表中，以json格式发送给前端，还会顺带将文件名也发送给前端，方便用户查看答案时的搜索。
5、查看具体回答时，前端会将这个标题所在的文件名发送给后端，然后后端根据这个请求的文件名，找到标题和回答，然后以json格式发送给前端。
6、注册：用户直接输入用户名和密码，然后在数据库中找这个用户名是否出现过，然后如果出现过就注册失败，没出现过就为用户注册，后端对前端发来的密码信息进行md5加密后在存储到数据库中。
7、登录：从数据库中查找有没有这个用户名，取出密码，对前端发来的密码进行粉粹（md5），如果两份相同则认为密码正确。（对密码粉粹后的结果进行对比）
8、添加新的回答：将新的回答加入到对应的文件中即可。
9、添加新的问题：创建一个新的文件，记录标题，然后对这个文件单独进行一次索引构建，将索引信息添加到之前的HashMap中即可。